import sys
import os
import re
import json
import sqlite3

class fix_syntax(object):
    folder_name = 'err_logs/' + 'sqlite3.OperationalError/' + 'syntax/'
    fix_folder_name = 'err_catch/' + 'syntax_sql/'
    sqlite_file = 'cnnvd.db'
    debug = False

    def __init__(self, debug=False):
        # make sure get cnnvd pipeline
        sys.path.insert(0, os.path.realpath('.'))
        os.makedirs(self.fix_folder_name, exist_ok=True)
        self.debug = debug
        if not self.debug:
            self.conn = sqlite3.connect(self.sqlite_file)
            self.cur = self.conn.cursor()

    def debug_print(self, m):
        if self.debug:
            print(m)
            print('\n----------------------------------------------------------------\n')

    def fix_one_file(self, file):
        json_string = self.parse_item(self.folder_name + file)
        self.parse_json(json_string, self.fix_folder_name + file + '.sql')


    def fix_syntax(self):
        for filename in os.listdir(self.folder_name):
            self.fix_one_file(filename)


    def parse_item(self, filename):
        with open(filename) as fp:
            content = fp.read()
            res = re.search("\{'CNNVD_id':.*\}", content, flags=re.M|re.S).group()
            # self.debug_print(res)
            res = re.sub("厂.*商", '厂商', res)
            res = re.sub("'(.+)\"(.+)\"(.+)'", "\"\g<1>'\g<2>'\g<3>\"", res)

            self.debug_print(res)
            res = re.sub("['\"](,|:)[\s\n]*?['\"]", "\"\g<1> \"", res)
            self.debug_print(res)
            res = re.sub("\{[\s\n]*'", "{\"", res)
            res = re.sub("'[\s\n]*\}", "\"}", res)
            

            # self.debug_print(res)
            res = re.sub("\n\s*'", "\n", res)
            res = re.sub("\n\s*\"", "\n", res)
            res = re.sub("'\s*\n", "\n", res)
            res = re.sub("\"\s*\n", "\n", res)
            res = res.replace("\\'", "\\\\'")
            res = res.replace("\\\\", "\\\\\\\\")
            # self.debug_print(res)
            res = res.replace('\n', '')
            return res


    def parse_json(self, json_str, filename):
        self.debug_print(json_str)
        try:
            json_dict = json.loads(json_str)
        except Exception as e:
            print(filename)
            print(e)
            return
        from cnnvd.pipelines import Sqlite3Pipeline
        pipeline = Sqlite3Pipeline('', '')
        sql_statement = pipeline.genreate_sql(json_dict)
        # self.debug_print(sql_statement)
        if not self.debug:
            try:
                self.cur.execute(sql_statement)
                self.conn.commit()
            except Exception as e:
                print(filename)
                print(e)
                return 
            with open(filename, 'w') as fw:
                fw.write(sql_statement)



if __name__ == '__main__':
    # CNNVD-201212-031
    # fix_syntax(debug=True).fix_one_file('CNNVD-200312-359')
    fix_syntax().fix_syntax()